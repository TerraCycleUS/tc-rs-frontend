import React, { useEffect, useState } from 'react'
import {
  useLogin,
  useNotify,
  Notification,
  TextInput,
  Form,
  PasswordInput,
} from 'react-admin'
import classes from '../CustomLogin/CustomLogin.module.scss'
import http from '../../../utils/http'

function TwoFactorLogin() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [verificationCode, setVerificationCode] = useState('')
  const login = useLogin()
  const notify = useNotify()
  const [base32, setBase32] = useState('')

  // to send code and base 32 on connect
  // to send on login after success setup
  // to generate qr from  otpauth
  useEffect(() => {
    // try {
    //   const res = await http.get('/api/auth/otp')
    //   // eslint-disable-next-line no-console
    //   console.log('res', res)
    //   setBase32(res)
    // } catch (error) {
    //   // eslint-disable-next-line no-console
    //   console.log('catch', error)
    // }
    const fetchData = async () => {
      const res = await http.get('/api/auth/otp')
      // eslint-disable-next-line no-console
      console.log(res)
      setBase32(res.data)
    }

    fetchData()
  }, [])

  // eslint-disable-next-line no-console
  console.log('base32', base32)

  const handleSubmit = (e) => {
    // eslint-disable-next-line no-console
    console.log('handleSubmit', 'TwoFactorLogin')
    login({
      email: e.email,
      password: e.password,
      verificationCode: e.verificationCode,
    })
      .then(() => {
        // eslint-disable-next-line no-console
        console.log('then', 'TwoFactorLogin')
        notify('Logged in successfully')
      })
      .catch(() => {
        // redirect('TwoFactorLogin1419')
        // eslint-disable-next-line no-console
        console.log('catch', 'TwoFactorLogin')
        notify('Invalid email or password')
      })
  }

  // eslint-disable-next-line no-console
  console.log('render', 'twoFactor')

  return (
    <Form className={classes.wrapper} onSubmit={handleSubmit}>
      <p>
        Connect an Authenticator App Connect an authenticator app that generates
        verification codes. You can use the codes when we need to verify your
        identity. Download and install an authenticator app on your mobile
        device. Use the app to scan this QR code. Enter the code generated by
        the app.
      </p>
      <div className={classes.inputWrapper}>
        <TextInput
          label="Email"
          source="email"
          name="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          fullWidth
        />
      </div>
      <div className={classes.inputWrapper}>
        <PasswordInput
          label="Password"
          source="password"
          name="password"
          value={password}
          onChange={(e) => setPassword(e.target.password)}
          fullWidth
        />
      </div>
      <div className={classes.inputWrapper}>
        <TextInput
          label="Verification code"
          source="verificationCode"
          name="verificationCode"
          value={verificationCode}
          onChange={(e) => setVerificationCode(e.target.verificationCode)}
          fullWidth
        />
      </div>
      <button className={classes.signIn} type="submit">
        Connect
      </button>
    </Form>
  )
}

function CustomLoginPage() {
  return (
    <>
      <Notification />
      <TwoFactorLogin />
    </>
  )
}

export default CustomLoginPage
